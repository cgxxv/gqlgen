input InnerInput {
    id:Int!
}

input OuterInput {
    inner: InnerInput!
}

type OuterObject {
    inner: InnerObject!
}

type InnerObject {
    id: Int!
}

interface Shape {
    area: Float
}

type Circle implements Shape {
    radius: Float
    area: Float
}

type Rectangle implements Shape {
    length: Float
    width: Float
    area: Float
}

union ShapeUnion = Circle | Rectangle

type Query {
    nestedInputs(input: [[OuterInput]] = [[{inner: {id: 1}}]]): Boolean
    nestedOutputs: [[OuterObject]]
    shapes: [Shape]
}

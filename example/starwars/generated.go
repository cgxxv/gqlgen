// This file was generated by github.com/vektah/gqlgen, DO NOT EDIT

package starwars

import (
	context "context"
	fmt "fmt"
	strconv "strconv"
	sync "sync"
	time "time"

	graphql "github.com/vektah/gqlgen/graphql"
	errors "github.com/vektah/gqlgen/neelance/errors"
	introspection "github.com/vektah/gqlgen/neelance/introspection"
	query "github.com/vektah/gqlgen/neelance/query"
	schema "github.com/vektah/gqlgen/neelance/schema"
)

type Resolvers interface {
	Droid_friends(ctx context.Context, it *Droid) ([]Character, error)
	Droid_friendsConnection(ctx context.Context, it *Droid, first *int, after *string) (FriendsConnection, error)

	FriendsConnection_edges(ctx context.Context, it *FriendsConnection) ([]FriendsEdge, error)
	FriendsConnection_friends(ctx context.Context, it *FriendsConnection) ([]Character, error)

	Human_friends(ctx context.Context, it *Human) ([]Character, error)
	Human_friendsConnection(ctx context.Context, it *Human, first *int, after *string) (FriendsConnection, error)

	Human_starships(ctx context.Context, it *Human) ([]Starship, error)
	Mutation_createReview(ctx context.Context, episode string, review Review) (*Review, error)

	Query_hero(ctx context.Context, episode *string) (Character, error)
	Query_reviews(ctx context.Context, episode string, since *time.Time) ([]Review, error)
	Query_search(ctx context.Context, text string) ([]SearchResult, error)
	Query_character(ctx context.Context, id string) (Character, error)
	Query_droid(ctx context.Context, id string) (*Droid, error)
	Query_human(ctx context.Context, id string) (*Human, error)
	Query_starship(ctx context.Context, id string) (*Starship, error)
}

func MakeExecutableSchema(resolvers Resolvers) graphql.ExecutableSchema {
	return &executableSchema{resolvers}
}

type executableSchema struct {
	resolvers Resolvers
}

func (e *executableSchema) Schema() *schema.Schema {
	return parsedSchema
}

func (e *executableSchema) Query(ctx context.Context, doc *query.Document, variables map[string]interface{}, op *query.Operation) *graphql.Response {
	ec := executionContext{resolvers: e.resolvers, variables: variables, doc: doc, ctx: ctx}

	data := ec._query(op.Selections, nil)
	ec.wg.Wait()

	return &graphql.Response{
		Data:   data,
		Errors: ec.Errors,
	}
}

func (e *executableSchema) Mutation(ctx context.Context, doc *query.Document, variables map[string]interface{}, op *query.Operation) *graphql.Response {
	ec := executionContext{resolvers: e.resolvers, variables: variables, doc: doc, ctx: ctx}

	data := ec._mutation(op.Selections, nil)
	ec.wg.Wait()

	return &graphql.Response{
		Data:   data,
		Errors: ec.Errors,
	}
}

func (e *executableSchema) Subscription(ctx context.Context, doc *query.Document, variables map[string]interface{}, op *query.Operation) <-chan *graphql.Response {
	events := make(chan *graphql.Response, 1)
	events <- &graphql.Response{Errors: []*errors.QueryError{{Message: "subscriptions are not supported"}}}
	return events
}

type executionContext struct {
	errors.Builder
	resolvers Resolvers
	variables map[string]interface{}
	doc       *query.Document
	ctx       context.Context
	wg        sync.WaitGroup
}

var droidImplementors = []string{"Droid", "Character"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _droid(sel []query.Selection, it *Droid) graphql.Marshaler {
	fields := graphql.CollectFields(ec.doc, sel, droidImplementors, ec.variables)
	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias
		out.Values[i] = graphql.Null

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Droid")
		case "id":
			res := it.ID

			out.Values[i] = graphql.MarshalID(res)
		case "name":
			res := it.Name

			out.Values[i] = graphql.MarshalString(res)
		case "friends":
			ec.wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				defer ec.wg.Done()
				res, err := ec.resolvers.Droid_friends(ec.ctx, it)
				if err != nil {
					ec.Error(err)
					return
				}

				arr1 := graphql.Array{}
				for idx1 := range res {
					var tmp1 graphql.Marshaler
					tmp1 = ec._character(field.Selections, &res[idx1])
					arr1 = append(arr1, tmp1)
				}
				out.Values[i] = arr1
			}(i, field)
		case "friendsConnection":
			var arg0 *int
			if tmp, ok := field.Args["first"]; ok {
				tmp2, err := graphql.UnmarshalInt(tmp)
				if err != nil {
					panic(err) // todo: fixme
				}
				arg0 = &tmp2
			}
			var arg1 *string
			if tmp, ok := field.Args["after"]; ok {
				tmp2, err := graphql.UnmarshalID(tmp)
				if err != nil {
					panic(err) // todo: fixme
				}
				arg1 = &tmp2
			}
			ec.wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				defer ec.wg.Done()
				res, err := ec.resolvers.Droid_friendsConnection(ec.ctx, it, arg0, arg1)
				if err != nil {
					ec.Error(err)
					return
				}

				out.Values[i] = ec._friendsConnection(field.Selections, &res)
			}(i, field)
		case "appearsIn":
			res := it.AppearsIn

			arr1 := graphql.Array{}
			for idx1 := range res {
				var tmp1 graphql.Marshaler
				tmp1 = graphql.MarshalString(res[idx1])
				arr1 = append(arr1, tmp1)
			}
			out.Values[i] = arr1
		case "primaryFunction":
			res := it.PrimaryFunction

			out.Values[i] = graphql.MarshalString(res)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

var friendsConnectionImplementors = []string{"FriendsConnection"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _friendsConnection(sel []query.Selection, it *FriendsConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.doc, sel, friendsConnectionImplementors, ec.variables)
	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias
		out.Values[i] = graphql.Null

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FriendsConnection")
		case "totalCount":
			res := it.TotalCount()

			out.Values[i] = graphql.MarshalInt(res)
		case "edges":
			ec.wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				defer ec.wg.Done()
				res, err := ec.resolvers.FriendsConnection_edges(ec.ctx, it)
				if err != nil {
					ec.Error(err)
					return
				}

				arr1 := graphql.Array{}
				for idx1 := range res {
					var tmp1 graphql.Marshaler
					tmp1 = ec._friendsEdge(field.Selections, &res[idx1])
					arr1 = append(arr1, tmp1)
				}
				out.Values[i] = arr1
			}(i, field)
		case "friends":
			ec.wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				defer ec.wg.Done()
				res, err := ec.resolvers.FriendsConnection_friends(ec.ctx, it)
				if err != nil {
					ec.Error(err)
					return
				}

				arr1 := graphql.Array{}
				for idx1 := range res {
					var tmp1 graphql.Marshaler
					tmp1 = ec._character(field.Selections, &res[idx1])
					arr1 = append(arr1, tmp1)
				}
				out.Values[i] = arr1
			}(i, field)
		case "pageInfo":
			res := it.PageInfo()

			out.Values[i] = ec._pageInfo(field.Selections, &res)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

var friendsEdgeImplementors = []string{"FriendsEdge"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _friendsEdge(sel []query.Selection, it *FriendsEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.doc, sel, friendsEdgeImplementors, ec.variables)
	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias
		out.Values[i] = graphql.Null

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FriendsEdge")
		case "cursor":
			res := it.Cursor

			out.Values[i] = graphql.MarshalID(res)
		case "node":
			res := it.Node

			out.Values[i] = ec._character(field.Selections, &res)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

var humanImplementors = []string{"Human", "Character"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _human(sel []query.Selection, it *Human) graphql.Marshaler {
	fields := graphql.CollectFields(ec.doc, sel, humanImplementors, ec.variables)
	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias
		out.Values[i] = graphql.Null

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Human")
		case "id":
			res := it.ID

			out.Values[i] = graphql.MarshalID(res)
		case "name":
			res := it.Name

			out.Values[i] = graphql.MarshalString(res)
		case "height":
			var arg0 string
			if tmp, ok := field.Args["unit"]; ok {
				tmp2, err := graphql.UnmarshalString(tmp)
				if err != nil {
					panic(err) // todo: fixme
				}
				arg0 = tmp2
			}
			res := it.Height(arg0)

			out.Values[i] = graphql.MarshalFloat(res)
		case "mass":
			res := it.Mass

			out.Values[i] = graphql.MarshalFloat(res)
		case "friends":
			ec.wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				defer ec.wg.Done()
				res, err := ec.resolvers.Human_friends(ec.ctx, it)
				if err != nil {
					ec.Error(err)
					return
				}

				arr1 := graphql.Array{}
				for idx1 := range res {
					var tmp1 graphql.Marshaler
					tmp1 = ec._character(field.Selections, &res[idx1])
					arr1 = append(arr1, tmp1)
				}
				out.Values[i] = arr1
			}(i, field)
		case "friendsConnection":
			var arg0 *int
			if tmp, ok := field.Args["first"]; ok {
				tmp2, err := graphql.UnmarshalInt(tmp)
				if err != nil {
					panic(err) // todo: fixme
				}
				arg0 = &tmp2
			}
			var arg1 *string
			if tmp, ok := field.Args["after"]; ok {
				tmp2, err := graphql.UnmarshalID(tmp)
				if err != nil {
					panic(err) // todo: fixme
				}
				arg1 = &tmp2
			}
			ec.wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				defer ec.wg.Done()
				res, err := ec.resolvers.Human_friendsConnection(ec.ctx, it, arg0, arg1)
				if err != nil {
					ec.Error(err)
					return
				}

				out.Values[i] = ec._friendsConnection(field.Selections, &res)
			}(i, field)
		case "appearsIn":
			res := it.AppearsIn

			arr1 := graphql.Array{}
			for idx1 := range res {
				var tmp1 graphql.Marshaler
				tmp1 = graphql.MarshalString(res[idx1])
				arr1 = append(arr1, tmp1)
			}
			out.Values[i] = arr1
		case "starships":
			ec.wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				defer ec.wg.Done()
				res, err := ec.resolvers.Human_starships(ec.ctx, it)
				if err != nil {
					ec.Error(err)
					return
				}

				arr1 := graphql.Array{}
				for idx1 := range res {
					var tmp1 graphql.Marshaler
					tmp1 = ec._starship(field.Selections, &res[idx1])
					arr1 = append(arr1, tmp1)
				}
				out.Values[i] = arr1
			}(i, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _mutation(sel []query.Selection, it *interface{}) graphql.Marshaler {
	fields := graphql.CollectFields(ec.doc, sel, mutationImplementors, ec.variables)
	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias
		out.Values[i] = graphql.Null

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createReview":
			var arg0 string
			if tmp, ok := field.Args["episode"]; ok {
				tmp2, err := graphql.UnmarshalString(tmp)
				if err != nil {
					panic(err) // todo: fixme
				}
				arg0 = tmp2
			}
			var arg1 Review
			if tmp, ok := field.Args["review"]; ok {
				tmp2, err := UnmarshalReviewInput(tmp)
				if err != nil {
					panic(err) // todo: fixme
				}
				arg1 = tmp2
			}
			res, err := ec.resolvers.Mutation_createReview(ec.ctx, arg0, arg1)
			if err != nil {
				ec.Error(err)
				continue
			}

			if res == nil {
				out.Values[i] = graphql.Null
			} else {
				out.Values[i] = ec._review(field.Selections, res)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

var pageInfoImplementors = []string{"PageInfo"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _pageInfo(sel []query.Selection, it *PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.doc, sel, pageInfoImplementors, ec.variables)
	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias
		out.Values[i] = graphql.Null

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "startCursor":
			res := it.StartCursor

			out.Values[i] = graphql.MarshalID(res)
		case "endCursor":
			res := it.EndCursor

			out.Values[i] = graphql.MarshalID(res)
		case "hasNextPage":
			res := it.HasNextPage

			out.Values[i] = graphql.MarshalBoolean(res)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

var queryImplementors = []string{"Query"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _query(sel []query.Selection, it *interface{}) graphql.Marshaler {
	fields := graphql.CollectFields(ec.doc, sel, queryImplementors, ec.variables)
	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias
		out.Values[i] = graphql.Null

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "hero":
			var arg0 *string
			if tmp, ok := field.Args["episode"]; ok {
				tmp2, err := graphql.UnmarshalString(tmp)
				if err != nil {
					panic(err) // todo: fixme
				}
				arg0 = &tmp2
			}
			ec.wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				defer ec.wg.Done()
				res, err := ec.resolvers.Query_hero(ec.ctx, arg0)
				if err != nil {
					ec.Error(err)
					return
				}

				out.Values[i] = ec._character(field.Selections, &res)
			}(i, field)
		case "reviews":
			var arg0 string
			if tmp, ok := field.Args["episode"]; ok {
				tmp2, err := graphql.UnmarshalString(tmp)
				if err != nil {
					panic(err) // todo: fixme
				}
				arg0 = tmp2
			}
			var arg1 *time.Time
			if tmp, ok := field.Args["since"]; ok {
				tmp2, err := graphql.UnmarshalTime(tmp)
				if err != nil {
					panic(err) // todo: fixme
				}
				arg1 = &tmp2
			}
			ec.wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				defer ec.wg.Done()
				res, err := ec.resolvers.Query_reviews(ec.ctx, arg0, arg1)
				if err != nil {
					ec.Error(err)
					return
				}

				arr1 := graphql.Array{}
				for idx1 := range res {
					var tmp1 graphql.Marshaler
					tmp1 = ec._review(field.Selections, &res[idx1])
					arr1 = append(arr1, tmp1)
				}
				out.Values[i] = arr1
			}(i, field)
		case "search":
			var arg0 string
			if tmp, ok := field.Args["text"]; ok {
				tmp2, err := graphql.UnmarshalString(tmp)
				if err != nil {
					panic(err) // todo: fixme
				}
				arg0 = tmp2
			}
			ec.wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				defer ec.wg.Done()
				res, err := ec.resolvers.Query_search(ec.ctx, arg0)
				if err != nil {
					ec.Error(err)
					return
				}

				arr1 := graphql.Array{}
				for idx1 := range res {
					var tmp1 graphql.Marshaler
					tmp1 = ec._searchResult(field.Selections, &res[idx1])
					arr1 = append(arr1, tmp1)
				}
				out.Values[i] = arr1
			}(i, field)
		case "character":
			var arg0 string
			if tmp, ok := field.Args["id"]; ok {
				tmp2, err := graphql.UnmarshalID(tmp)
				if err != nil {
					panic(err) // todo: fixme
				}
				arg0 = tmp2
			}
			ec.wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				defer ec.wg.Done()
				res, err := ec.resolvers.Query_character(ec.ctx, arg0)
				if err != nil {
					ec.Error(err)
					return
				}

				out.Values[i] = ec._character(field.Selections, &res)
			}(i, field)
		case "droid":
			var arg0 string
			if tmp, ok := field.Args["id"]; ok {
				tmp2, err := graphql.UnmarshalID(tmp)
				if err != nil {
					panic(err) // todo: fixme
				}
				arg0 = tmp2
			}
			ec.wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				defer ec.wg.Done()
				res, err := ec.resolvers.Query_droid(ec.ctx, arg0)
				if err != nil {
					ec.Error(err)
					return
				}

				if res == nil {
					out.Values[i] = graphql.Null
				} else {
					out.Values[i] = ec._droid(field.Selections, res)
				}
			}(i, field)
		case "human":
			var arg0 string
			if tmp, ok := field.Args["id"]; ok {
				tmp2, err := graphql.UnmarshalID(tmp)
				if err != nil {
					panic(err) // todo: fixme
				}
				arg0 = tmp2
			}
			ec.wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				defer ec.wg.Done()
				res, err := ec.resolvers.Query_human(ec.ctx, arg0)
				if err != nil {
					ec.Error(err)
					return
				}

				if res == nil {
					out.Values[i] = graphql.Null
				} else {
					out.Values[i] = ec._human(field.Selections, res)
				}
			}(i, field)
		case "starship":
			var arg0 string
			if tmp, ok := field.Args["id"]; ok {
				tmp2, err := graphql.UnmarshalID(tmp)
				if err != nil {
					panic(err) // todo: fixme
				}
				arg0 = tmp2
			}
			ec.wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				defer ec.wg.Done()
				res, err := ec.resolvers.Query_starship(ec.ctx, arg0)
				if err != nil {
					ec.Error(err)
					return
				}

				if res == nil {
					out.Values[i] = graphql.Null
				} else {
					out.Values[i] = ec._starship(field.Selections, res)
				}
			}(i, field)
		case "__schema":
			res := ec.introspectSchema()

			if res == nil {
				out.Values[i] = graphql.Null
			} else {
				out.Values[i] = ec.___Schema(field.Selections, res)
			}
		case "__type":
			var arg0 string
			if tmp, ok := field.Args["name"]; ok {
				tmp2, err := graphql.UnmarshalString(tmp)
				if err != nil {
					panic(err) // todo: fixme
				}
				arg0 = tmp2
			}
			res := ec.introspectType(arg0)

			if res == nil {
				out.Values[i] = graphql.Null
			} else {
				out.Values[i] = ec.___Type(field.Selections, res)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

var reviewImplementors = []string{"Review"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _review(sel []query.Selection, it *Review) graphql.Marshaler {
	fields := graphql.CollectFields(ec.doc, sel, reviewImplementors, ec.variables)
	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias
		out.Values[i] = graphql.Null

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Review")
		case "stars":
			res := it.Stars

			out.Values[i] = graphql.MarshalInt(res)
		case "commentary":
			res := it.Commentary

			if res == nil {
				out.Values[i] = graphql.Null
			} else {
				out.Values[i] = graphql.MarshalString(*res)
			}
		case "time":
			res := it.Time

			out.Values[i] = graphql.MarshalTime(res)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

var starshipImplementors = []string{"Starship"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _starship(sel []query.Selection, it *Starship) graphql.Marshaler {
	fields := graphql.CollectFields(ec.doc, sel, starshipImplementors, ec.variables)
	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias
		out.Values[i] = graphql.Null

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Starship")
		case "id":
			res := it.ID

			out.Values[i] = graphql.MarshalID(res)
		case "name":
			res := it.Name

			out.Values[i] = graphql.MarshalString(res)
		case "length":
			var arg0 string
			if tmp, ok := field.Args["unit"]; ok {
				tmp2, err := graphql.UnmarshalString(tmp)
				if err != nil {
					panic(err) // todo: fixme
				}
				arg0 = tmp2
			}
			res := it.Length(arg0)

			out.Values[i] = graphql.MarshalFloat(res)
		case "history":
			res := it.History

			arr1 := graphql.Array{}
			for idx1 := range res {
				var tmp1 graphql.Marshaler

				arr2 := graphql.Array{}
				for idx2 := range res[idx1] {
					var tmp2 graphql.Marshaler
					tmp2 = graphql.MarshalInt(res[idx1][idx2])
					arr2 = append(arr2, tmp2)
				}
				tmp1 = arr2
				arr1 = append(arr1, tmp1)
			}
			out.Values[i] = arr1
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Directive(sel []query.Selection, it *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.doc, sel, __DirectiveImplementors, ec.variables)
	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias
		out.Values[i] = graphql.Null

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			res := it.Name()

			out.Values[i] = graphql.MarshalString(res)
		case "description":
			res := it.Description()

			if res == nil {
				out.Values[i] = graphql.Null
			} else {
				out.Values[i] = graphql.MarshalString(*res)
			}
		case "locations":
			res := it.Locations()

			arr1 := graphql.Array{}
			for idx1 := range res {
				var tmp1 graphql.Marshaler
				tmp1 = graphql.MarshalString(res[idx1])
				arr1 = append(arr1, tmp1)
			}
			out.Values[i] = arr1
		case "args":
			res := it.Args()

			arr1 := graphql.Array{}
			for idx1 := range res {
				var tmp1 graphql.Marshaler

				if res[idx1] == nil {
					tmp1 = graphql.Null
				} else {
					tmp1 = ec.___InputValue(field.Selections, res[idx1])
				}
				arr1 = append(arr1, tmp1)
			}
			out.Values[i] = arr1
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___EnumValue(sel []query.Selection, it *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.doc, sel, __EnumValueImplementors, ec.variables)
	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias
		out.Values[i] = graphql.Null

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			res := it.Name()

			out.Values[i] = graphql.MarshalString(res)
		case "description":
			res := it.Description()

			if res == nil {
				out.Values[i] = graphql.Null
			} else {
				out.Values[i] = graphql.MarshalString(*res)
			}
		case "isDeprecated":
			res := it.IsDeprecated()

			out.Values[i] = graphql.MarshalBoolean(res)
		case "deprecationReason":
			res := it.DeprecationReason()

			if res == nil {
				out.Values[i] = graphql.Null
			} else {
				out.Values[i] = graphql.MarshalString(*res)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Field(sel []query.Selection, it *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.doc, sel, __FieldImplementors, ec.variables)
	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias
		out.Values[i] = graphql.Null

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			res := it.Name()

			out.Values[i] = graphql.MarshalString(res)
		case "description":
			res := it.Description()

			if res == nil {
				out.Values[i] = graphql.Null
			} else {
				out.Values[i] = graphql.MarshalString(*res)
			}
		case "args":
			res := it.Args()

			arr1 := graphql.Array{}
			for idx1 := range res {
				var tmp1 graphql.Marshaler

				if res[idx1] == nil {
					tmp1 = graphql.Null
				} else {
					tmp1 = ec.___InputValue(field.Selections, res[idx1])
				}
				arr1 = append(arr1, tmp1)
			}
			out.Values[i] = arr1
		case "type":
			res := it.Type()

			if res == nil {
				out.Values[i] = graphql.Null
			} else {
				out.Values[i] = ec.___Type(field.Selections, res)
			}
		case "isDeprecated":
			res := it.IsDeprecated()

			out.Values[i] = graphql.MarshalBoolean(res)
		case "deprecationReason":
			res := it.DeprecationReason()

			if res == nil {
				out.Values[i] = graphql.Null
			} else {
				out.Values[i] = graphql.MarshalString(*res)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___InputValue(sel []query.Selection, it *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.doc, sel, __InputValueImplementors, ec.variables)
	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias
		out.Values[i] = graphql.Null

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			res := it.Name()

			out.Values[i] = graphql.MarshalString(res)
		case "description":
			res := it.Description()

			if res == nil {
				out.Values[i] = graphql.Null
			} else {
				out.Values[i] = graphql.MarshalString(*res)
			}
		case "type":
			res := it.Type()

			if res == nil {
				out.Values[i] = graphql.Null
			} else {
				out.Values[i] = ec.___Type(field.Selections, res)
			}
		case "defaultValue":
			res := it.DefaultValue()

			if res == nil {
				out.Values[i] = graphql.Null
			} else {
				out.Values[i] = graphql.MarshalString(*res)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Schema(sel []query.Selection, it *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.doc, sel, __SchemaImplementors, ec.variables)
	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias
		out.Values[i] = graphql.Null

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			res := it.Types()

			arr1 := graphql.Array{}
			for idx1 := range res {
				var tmp1 graphql.Marshaler

				if res[idx1] == nil {
					tmp1 = graphql.Null
				} else {
					tmp1 = ec.___Type(field.Selections, res[idx1])
				}
				arr1 = append(arr1, tmp1)
			}
			out.Values[i] = arr1
		case "queryType":
			res := it.QueryType()

			if res == nil {
				out.Values[i] = graphql.Null
			} else {
				out.Values[i] = ec.___Type(field.Selections, res)
			}
		case "mutationType":
			res := it.MutationType()

			if res == nil {
				out.Values[i] = graphql.Null
			} else {
				out.Values[i] = ec.___Type(field.Selections, res)
			}
		case "subscriptionType":
			res := it.SubscriptionType()

			if res == nil {
				out.Values[i] = graphql.Null
			} else {
				out.Values[i] = ec.___Type(field.Selections, res)
			}
		case "directives":
			res := it.Directives()

			arr1 := graphql.Array{}
			for idx1 := range res {
				var tmp1 graphql.Marshaler

				if res[idx1] == nil {
					tmp1 = graphql.Null
				} else {
					tmp1 = ec.___Directive(field.Selections, res[idx1])
				}
				arr1 = append(arr1, tmp1)
			}
			out.Values[i] = arr1
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Type(sel []query.Selection, it *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.doc, sel, __TypeImplementors, ec.variables)
	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias
		out.Values[i] = graphql.Null

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			res := it.Kind()

			out.Values[i] = graphql.MarshalString(res)
		case "name":
			res := it.Name()

			if res == nil {
				out.Values[i] = graphql.Null
			} else {
				out.Values[i] = graphql.MarshalString(*res)
			}
		case "description":
			res := it.Description()

			if res == nil {
				out.Values[i] = graphql.Null
			} else {
				out.Values[i] = graphql.MarshalString(*res)
			}
		case "fields":
			var arg0 bool
			if tmp, ok := field.Args["includeDeprecated"]; ok {
				tmp2, err := graphql.UnmarshalBoolean(tmp)
				if err != nil {
					panic(err) // todo: fixme
				}
				arg0 = tmp2
			}
			res := it.Fields(arg0)

			arr1 := graphql.Array{}
			for idx1 := range res {
				var tmp1 graphql.Marshaler

				if res[idx1] == nil {
					tmp1 = graphql.Null
				} else {
					tmp1 = ec.___Field(field.Selections, res[idx1])
				}
				arr1 = append(arr1, tmp1)
			}
			out.Values[i] = arr1
		case "interfaces":
			res := it.Interfaces()

			arr1 := graphql.Array{}
			for idx1 := range res {
				var tmp1 graphql.Marshaler

				if res[idx1] == nil {
					tmp1 = graphql.Null
				} else {
					tmp1 = ec.___Type(field.Selections, res[idx1])
				}
				arr1 = append(arr1, tmp1)
			}
			out.Values[i] = arr1
		case "possibleTypes":
			res := it.PossibleTypes()

			arr1 := graphql.Array{}
			for idx1 := range res {
				var tmp1 graphql.Marshaler

				if res[idx1] == nil {
					tmp1 = graphql.Null
				} else {
					tmp1 = ec.___Type(field.Selections, res[idx1])
				}
				arr1 = append(arr1, tmp1)
			}
			out.Values[i] = arr1
		case "enumValues":
			var arg0 bool
			if tmp, ok := field.Args["includeDeprecated"]; ok {
				tmp2, err := graphql.UnmarshalBoolean(tmp)
				if err != nil {
					panic(err) // todo: fixme
				}
				arg0 = tmp2
			}
			res := it.EnumValues(arg0)

			arr1 := graphql.Array{}
			for idx1 := range res {
				var tmp1 graphql.Marshaler

				if res[idx1] == nil {
					tmp1 = graphql.Null
				} else {
					tmp1 = ec.___EnumValue(field.Selections, res[idx1])
				}
				arr1 = append(arr1, tmp1)
			}
			out.Values[i] = arr1
		case "inputFields":
			res := it.InputFields()

			arr1 := graphql.Array{}
			for idx1 := range res {
				var tmp1 graphql.Marshaler

				if res[idx1] == nil {
					tmp1 = graphql.Null
				} else {
					tmp1 = ec.___InputValue(field.Selections, res[idx1])
				}
				arr1 = append(arr1, tmp1)
			}
			out.Values[i] = arr1
		case "ofType":
			res := it.OfType()

			if res == nil {
				out.Values[i] = graphql.Null
			} else {
				out.Values[i] = ec.___Type(field.Selections, res)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _character(sel []query.Selection, it *Character) graphql.Marshaler {
	switch it := (*it).(type) {
	case nil:
		return graphql.Null
	case Human:
		return ec._human(sel, &it)

	case *Human:
		return ec._human(sel, it)
	case Droid:
		return ec._droid(sel, &it)

	case *Droid:
		return ec._droid(sel, it)
	default:
		panic(fmt.Errorf("unexpected type %T", it))
	}
}

func (ec *executionContext) _searchResult(sel []query.Selection, it *SearchResult) graphql.Marshaler {
	switch it := (*it).(type) {
	case nil:
		return graphql.Null
	case Human:
		return ec._human(sel, &it)

	case *Human:
		return ec._human(sel, it)
	case Droid:
		return ec._droid(sel, &it)

	case *Droid:
		return ec._droid(sel, it)
	case Starship:
		return ec._starship(sel, &it)

	case *Starship:
		return ec._starship(sel, it)
	default:
		panic(fmt.Errorf("unexpected type %T", it))
	}
}

func UnmarshalReviewInput(v interface{}) (Review, error) {
	var it Review

	for k, v := range v.(map[string]interface{}) {
		switch k {
		case "stars":
			val, err := graphql.UnmarshalInt(v)
			if err != nil {
				return it, err
			}
			it.Stars = val
		case "commentary":
			val, err := graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
			it.Commentary = &val
		case "time":
			val, err := graphql.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
			it.Time = val
		}
	}

	return it, nil
}

var parsedSchema = schema.MustParse("schema {\n    query: Query\n    mutation: Mutation\n}\n# The query type, represents all of the entry points into our object graph\ntype Query {\n    hero(episode: Episode = NEWHOPE): Character\n    reviews(episode: Episode!, since: Time): [Review]!\n    search(text: String!): [SearchResult]!\n    character(id: ID!): Character\n    droid(id: ID!): Droid\n    human(id: ID!): Human\n    starship(id: ID!): Starship\n}\n# The mutation type, represents all updates we can make to our data\ntype Mutation {\n    createReview(episode: Episode!, review: ReviewInput!): Review\n}\n# The episodes in the Star Wars trilogy\nenum Episode {\n    # Star Wars Episode IV: A New Hope, released in 1977.\n    NEWHOPE\n    # Star Wars Episode V: The Empire Strikes Back, released in 1980.\n    EMPIRE\n    # Star Wars Episode VI: Return of the Jedi, released in 1983.\n    JEDI\n}\n# A character from the Star Wars universe\ninterface Character {\n    # The ID of the character\n    id: ID!\n    # The name of the character\n    name: String!\n    # The friends of the character, or an empty list if they have none\n    friends: [Character]\n    # The friends of the character exposed as a connection with edges\n    friendsConnection(first: Int, after: ID): FriendsConnection!\n    # The movies this character appears in\n    appearsIn: [Episode!]!\n}\n# Units of height\nenum LengthUnit {\n    # The standard unit around the world\n    METER\n    # Primarily used in the United States\n    FOOT\n}\n# A humanoid creature from the Star Wars universe\ntype Human implements Character {\n    # The ID of the human\n    id: ID!\n    # What this human calls themselves\n    name: String!\n    # Height in the preferred unit, default is meters\n    height(unit: LengthUnit = METER): Float!\n    # Mass in kilograms, or null if unknown\n    mass: Float\n    # This human's friends, or an empty list if they have none\n    friends: [Character]\n    # The friends of the human exposed as a connection with edges\n    friendsConnection(first: Int, after: ID): FriendsConnection!\n    # The movies this human appears in\n    appearsIn: [Episode!]!\n    # A list of starships this person has piloted, or an empty list if none\n    starships: [Starship]\n}\n# An autonomous mechanical character in the Star Wars universe\ntype Droid implements Character {\n    # The ID of the droid\n    id: ID!\n    # What others call this droid\n    name: String!\n    # This droid's friends, or an empty list if they have none\n    friends: [Character]\n    # The friends of the droid exposed as a connection with edges\n    friendsConnection(first: Int, after: ID): FriendsConnection!\n    # The movies this droid appears in\n    appearsIn: [Episode!]!\n    # This droid's primary function\n    primaryFunction: String\n}\n# A connection object for a character's friends\ntype FriendsConnection {\n    # The total number of friends\n    totalCount: Int!\n    # The edges for each of the character's friends.\n    edges: [FriendsEdge]\n    # A list of the friends, as a convenience when edges are not needed.\n    friends: [Character]\n    # Information for paginating this connection\n    pageInfo: PageInfo!\n}\n# An edge object for a character's friends\ntype FriendsEdge {\n    # A cursor used for pagination\n    cursor: ID!\n    # The character represented by this friendship edge\n    node: Character\n}\n# Information for paginating this connection\ntype PageInfo {\n    startCursor: ID\n    endCursor: ID\n    hasNextPage: Boolean!\n}\n# Represents a review for a movie\ntype Review {\n    # The number of stars this review gave, 1-5\n    stars: Int!\n    # Comment about the movie\n    commentary: String\n    # when the review was posted\n    time: Time\n}\n# The input object sent when someone is creating a new review\ninput ReviewInput {\n    # 0-5 stars\n    stars: Int!\n    # Comment about the movie, optional\n    commentary: String\n    # when the review was posted\n    time: Time\n}\ntype Starship {\n    # The ID of the starship\n    id: ID!\n    # The name of the starship\n    name: String!\n    # Length of the starship, along the longest axis\n    length(unit: LengthUnit = METER): Float!\n    # coordinates tracking this ship\n    history: [[Int]]\n}\nunion SearchResult = Human | Droid | Starship\nscalar Time\n")

func (ec *executionContext) introspectSchema() *introspection.Schema {
	return introspection.WrapSchema(parsedSchema)
}

func (ec *executionContext) introspectType(name string) *introspection.Type {
	t := parsedSchema.Resolve(name)
	if t == nil {
		return nil
	}
	return introspection.WrapType(t)
}

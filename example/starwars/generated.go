// This file was generated by github.com/vektah/gqlgen, DO NOT EDIT

package starwars

import (
	context "context"
	fmt "fmt"
	io "io"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
	sync "sync"
	time "time"

	mapstructure "github.com/mitchellh/mapstructure"
	jsonw "github.com/vektah/gqlgen/jsonw"
	errors "github.com/vektah/gqlgen/neelance/errors"
	introspection "github.com/vektah/gqlgen/neelance/introspection"
	query "github.com/vektah/gqlgen/neelance/query"
	schema "github.com/vektah/gqlgen/neelance/schema"
	validation "github.com/vektah/gqlgen/neelance/validation"
)

type Resolvers interface {
	Droid_friends(ctx context.Context, it *Droid) ([]Character, error)
	Droid_friendsConnection(ctx context.Context, it *Droid, first *int, after *string) (FriendsConnection, error)

	FriendsConnection_edges(ctx context.Context, it *FriendsConnection) ([]FriendsEdge, error)
	FriendsConnection_friends(ctx context.Context, it *FriendsConnection) ([]Character, error)

	Human_friends(ctx context.Context, it *Human) ([]Character, error)
	Human_friendsConnection(ctx context.Context, it *Human, first *int, after *string) (FriendsConnection, error)

	Human_starships(ctx context.Context, it *Human) ([]Starship, error)

	Mutation_createReview(ctx context.Context, episode string, review Review) (*Review, error)

	Query_hero(ctx context.Context, episode *string) (Character, error)
	Query_reviews(ctx context.Context, episode string, since *time.Time) ([]Review, error)
	Query_search(ctx context.Context, text string) ([]SearchResult, error)
	Query_character(ctx context.Context, id string) (Character, error)
	Query_droid(ctx context.Context, id string) (*Droid, error)
	Query_human(ctx context.Context, id string) (*Human, error)
	Query_starship(ctx context.Context, id string) (*Starship, error)
}

func NewExecutor(resolvers Resolvers) func(context.Context, string, string, map[string]interface{}, io.Writer) []*errors.QueryError {
	return func(ctx context.Context, document string, operationName string, variables map[string]interface{}, w io.Writer) []*errors.QueryError {
		doc, qErr := query.Parse(document)
		if qErr != nil {
			return []*errors.QueryError{qErr}
		}

		errs := validation.Validate(parsedSchema, doc)
		if len(errs) != 0 {
			return errs
		}

		op, err := doc.GetOperation(operationName)
		if err != nil {
			return []*errors.QueryError{errors.Errorf("%s", err)}
		}

		c := executionContext{
			resolvers: resolvers,
			variables: variables,
			doc:       doc,
			ctx:       ctx,
		}

		var result jsonw.JsonWriter
		if op.Type == query.Query {
			result = c._query(op.Selections, nil)

		} else if op.Type == query.Mutation {
			result = c._mutation(op.Selections, nil)

		} else {
			return []*errors.QueryError{errors.Errorf("unsupported operation type")}
		}

		c.wg.Wait()

		// TODO: parallelize if query.

		writer := jsonw.New(w)
		writer.BeginObject()

		writer.ObjectKey("data")
		result.WriteJson(writer)

		if len(c.Errors) > 0 {
			writer.ObjectKey("errors")
			errors.WriteErrors(w, c.Errors)
		}

		writer.EndObject()
		return nil
	}
}

type executionContext struct {
	errors.Builder
	resolvers Resolvers
	variables map[string]interface{}
	doc       *query.Document
	ctx       context.Context
	wg        sync.WaitGroup
}

type _DroidNode struct {
	_fields []collectedField

	Id                string
	Name              string
	Friends           []jsonw.JsonWriter
	FriendsConnection jsonw.JsonWriter
	AppearsIn         []string
	PrimaryFunction   string
}

var droidImplementors = []string{"Droid", "Character"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _droid(sel []query.Selection, it *Droid) jsonw.JsonWriter {
	node := _DroidNode{
		_fields: ec.collectFields(sel, droidImplementors, map[string]bool{}),
	}

	for _, field := range node._fields {
		switch field.Name {
		case "id":
			res := it.ID

			node.Id = res

		case "name":
			res := it.Name

			node.Name = res

		case "friends":

			ec.wg.Add(1)
			go func(field collectedField) {
				defer ec.wg.Done()

				res, err := ec.resolvers.Droid_friends(ec.ctx, it)
				if err != nil {
					ec.Error(err)
					return
				}

				if res != nil {

					for i := range res {
						node.Friends = append(node.Friends, ec._character(field.Selections, res[i]))
					}

				}

			}(field)

		case "friendsConnection":
			var arg0 *int
			if tmp, ok := field.Args["first"]; ok {
				tmp2, err := coerceInt(tmp)
				if err != nil {
					ec.Error(err)
					continue
				}
				arg0 = &tmp2
			}
			var arg1 *string
			if tmp, ok := field.Args["after"]; ok {
				tmp2, err := coerceString(tmp)
				if err != nil {
					ec.Error(err)
					continue
				}
				arg1 = &tmp2
			}

			ec.wg.Add(1)
			go func(field collectedField) {
				defer ec.wg.Done()

				res, err := ec.resolvers.Droid_friendsConnection(ec.ctx, it, arg0, arg1)
				if err != nil {
					ec.Error(err)
					return
				}

				node.FriendsConnection = ec._friendsConnection(field.Selections, &res)

			}(field)

		case "appearsIn":
			res := it.AppearsIn

			node.AppearsIn = res

		case "primaryFunction":
			res := it.PrimaryFunction

			node.PrimaryFunction = res

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return &node
}

func (t *_DroidNode) WriteJson(w *jsonw.Writer) {
	w.BeginObject()
	for _, field := range t._fields {
		switch field.Name {
		case "id":
			w.ObjectKey("id")
			w.String(t.Id)
		case "name":
			w.ObjectKey("name")
			w.String(t.Name)
		case "friends":
			w.ObjectKey("friends")
			w.BeginArray()
			for _, val := range t.Friends {
				val.WriteJson(w)
			}
			w.EndArray()
		case "friendsConnection":
			w.ObjectKey("friendsConnection")
			t.FriendsConnection.WriteJson(w)
		case "appearsIn":
			w.ObjectKey("appearsIn")
			w.BeginArray()
			for _, val := range t.AppearsIn {
				w.String(val)
			}
			w.EndArray()
		case "primaryFunction":
			w.ObjectKey("primaryFunction")
			w.String(t.PrimaryFunction)

		}
	}
	w.EndObject()
}

type _FriendsConnectionNode struct {
	_fields []collectedField

	TotalCount int
	Edges      []jsonw.JsonWriter
	Friends    []jsonw.JsonWriter
	PageInfo   jsonw.JsonWriter
}

var friendsConnectionImplementors = []string{"FriendsConnection"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _friendsConnection(sel []query.Selection, it *FriendsConnection) jsonw.JsonWriter {
	node := _FriendsConnectionNode{
		_fields: ec.collectFields(sel, friendsConnectionImplementors, map[string]bool{}),
	}

	for _, field := range node._fields {
		switch field.Name {
		case "totalCount":
			res := it.TotalCount()

			node.TotalCount = res

		case "edges":

			ec.wg.Add(1)
			go func(field collectedField) {
				defer ec.wg.Done()

				res, err := ec.resolvers.FriendsConnection_edges(ec.ctx, it)
				if err != nil {
					ec.Error(err)
					return
				}

				if res != nil {

					for i := range res {
						node.Edges = append(node.Edges, ec._friendsEdge(field.Selections, &res[i]))
					}

				}

			}(field)

		case "friends":

			ec.wg.Add(1)
			go func(field collectedField) {
				defer ec.wg.Done()

				res, err := ec.resolvers.FriendsConnection_friends(ec.ctx, it)
				if err != nil {
					ec.Error(err)
					return
				}

				if res != nil {

					for i := range res {
						node.Friends = append(node.Friends, ec._character(field.Selections, res[i]))
					}

				}

			}(field)

		case "pageInfo":
			res := it.PageInfo()

			node.PageInfo = ec._pageInfo(field.Selections, &res)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return &node
}

func (t *_FriendsConnectionNode) WriteJson(w *jsonw.Writer) {
	w.BeginObject()
	for _, field := range t._fields {
		switch field.Name {
		case "totalCount":
			w.ObjectKey("totalCount")
			w.Int(t.TotalCount)
		case "edges":
			w.ObjectKey("edges")
			w.BeginArray()
			for _, val := range t.Edges {
				val.WriteJson(w)
			}
			w.EndArray()
		case "friends":
			w.ObjectKey("friends")
			w.BeginArray()
			for _, val := range t.Friends {
				val.WriteJson(w)
			}
			w.EndArray()
		case "pageInfo":
			w.ObjectKey("pageInfo")
			t.PageInfo.WriteJson(w)

		}
	}
	w.EndObject()
}

type _FriendsEdgeNode struct {
	_fields []collectedField

	Cursor string
	Node   jsonw.JsonWriter
}

var friendsEdgeImplementors = []string{"FriendsEdge"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _friendsEdge(sel []query.Selection, it *FriendsEdge) jsonw.JsonWriter {
	node := _FriendsEdgeNode{
		_fields: ec.collectFields(sel, friendsEdgeImplementors, map[string]bool{}),
	}

	for _, field := range node._fields {
		switch field.Name {
		case "cursor":
			res := it.Cursor

			node.Cursor = res

		case "node":
			res := it.Node

			node.Node = ec._character(field.Selections, res)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return &node
}

func (t *_FriendsEdgeNode) WriteJson(w *jsonw.Writer) {
	w.BeginObject()
	for _, field := range t._fields {
		switch field.Name {
		case "cursor":
			w.ObjectKey("cursor")
			w.String(t.Cursor)
		case "node":
			w.ObjectKey("node")
			t.Node.WriteJson(w)

		}
	}
	w.EndObject()
}

type _HumanNode struct {
	_fields []collectedField

	Id                string
	Name              string
	Height            float64
	Mass              float64
	Friends           []jsonw.JsonWriter
	FriendsConnection jsonw.JsonWriter
	AppearsIn         []string
	Starships         []jsonw.JsonWriter
}

var humanImplementors = []string{"Human", "Character"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _human(sel []query.Selection, it *Human) jsonw.JsonWriter {
	node := _HumanNode{
		_fields: ec.collectFields(sel, humanImplementors, map[string]bool{}),
	}

	for _, field := range node._fields {
		switch field.Name {
		case "id":
			res := it.ID

			node.Id = res

		case "name":
			res := it.Name

			node.Name = res

		case "height":
			var arg0 string
			if tmp, ok := field.Args["unit"]; ok {
				tmp2, err := coerceString(tmp)
				if err != nil {
					ec.Error(err)
					continue
				}
				arg0 = tmp2
			}
			res := it.Height(arg0)

			node.Height = res

		case "mass":
			res := it.Mass

			node.Mass = res

		case "friends":

			ec.wg.Add(1)
			go func(field collectedField) {
				defer ec.wg.Done()

				res, err := ec.resolvers.Human_friends(ec.ctx, it)
				if err != nil {
					ec.Error(err)
					return
				}

				if res != nil {

					for i := range res {
						node.Friends = append(node.Friends, ec._character(field.Selections, res[i]))
					}

				}

			}(field)

		case "friendsConnection":
			var arg0 *int
			if tmp, ok := field.Args["first"]; ok {
				tmp2, err := coerceInt(tmp)
				if err != nil {
					ec.Error(err)
					continue
				}
				arg0 = &tmp2
			}
			var arg1 *string
			if tmp, ok := field.Args["after"]; ok {
				tmp2, err := coerceString(tmp)
				if err != nil {
					ec.Error(err)
					continue
				}
				arg1 = &tmp2
			}

			ec.wg.Add(1)
			go func(field collectedField) {
				defer ec.wg.Done()

				res, err := ec.resolvers.Human_friendsConnection(ec.ctx, it, arg0, arg1)
				if err != nil {
					ec.Error(err)
					return
				}

				node.FriendsConnection = ec._friendsConnection(field.Selections, &res)

			}(field)

		case "appearsIn":
			res := it.AppearsIn

			node.AppearsIn = res

		case "starships":

			ec.wg.Add(1)
			go func(field collectedField) {
				defer ec.wg.Done()

				res, err := ec.resolvers.Human_starships(ec.ctx, it)
				if err != nil {
					ec.Error(err)
					return
				}

				if res != nil {

					for i := range res {
						node.Starships = append(node.Starships, ec._starship(field.Selections, &res[i]))
					}

				}

			}(field)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return &node
}

func (t *_HumanNode) WriteJson(w *jsonw.Writer) {
	w.BeginObject()
	for _, field := range t._fields {
		switch field.Name {
		case "id":
			w.ObjectKey("id")
			w.String(t.Id)
		case "name":
			w.ObjectKey("name")
			w.String(t.Name)
		case "height":
			w.ObjectKey("height")
			w.Float64(t.Height)
		case "mass":
			w.ObjectKey("mass")
			w.Float64(t.Mass)
		case "friends":
			w.ObjectKey("friends")
			w.BeginArray()
			for _, val := range t.Friends {
				val.WriteJson(w)
			}
			w.EndArray()
		case "friendsConnection":
			w.ObjectKey("friendsConnection")
			t.FriendsConnection.WriteJson(w)
		case "appearsIn":
			w.ObjectKey("appearsIn")
			w.BeginArray()
			for _, val := range t.AppearsIn {
				w.String(val)
			}
			w.EndArray()
		case "starships":
			w.ObjectKey("starships")
			w.BeginArray()
			for _, val := range t.Starships {
				val.WriteJson(w)
			}
			w.EndArray()

		}
	}
	w.EndObject()
}

type _MutationNode struct {
	_fields []collectedField

	CreateReview jsonw.JsonWriter
}

var mutationImplementors = []string{"Mutation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _mutation(sel []query.Selection, it *interface{}) jsonw.JsonWriter {
	node := _MutationNode{
		_fields: ec.collectFields(sel, mutationImplementors, map[string]bool{}),
	}

	for _, field := range node._fields {
		switch field.Name {
		case "createReview":
			var arg0 string
			if tmp, ok := field.Args["episode"]; ok {
				tmp2, err := coerceString(tmp)
				if err != nil {
					ec.Error(err)
					continue
				}
				arg0 = tmp2
			}
			var arg1 Review
			err := unpackComplexArg(&arg1, field.Args["review"])
			if err != nil {
				ec.Error(err)
				continue
			}

			ec.wg.Add(1)
			go func(field collectedField) {
				defer ec.wg.Done()

				res, err := ec.resolvers.Mutation_createReview(ec.ctx, arg0, arg1)
				if err != nil {
					ec.Error(err)
					return
				}

				if res != nil {

					node.CreateReview = ec._review(field.Selections, res)

				}

			}(field)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return &node
}

func (t *_MutationNode) WriteJson(w *jsonw.Writer) {
	w.BeginObject()
	for _, field := range t._fields {
		switch field.Name {
		case "createReview":
			w.ObjectKey("createReview")
			if t.CreateReview == nil {
				w.Null()
			} else {
				t.CreateReview.WriteJson(w)
			}

		}
	}
	w.EndObject()
}

type _PageInfoNode struct {
	_fields []collectedField

	StartCursor string
	EndCursor   string
	HasNextPage bool
}

var pageInfoImplementors = []string{"PageInfo"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _pageInfo(sel []query.Selection, it *PageInfo) jsonw.JsonWriter {
	node := _PageInfoNode{
		_fields: ec.collectFields(sel, pageInfoImplementors, map[string]bool{}),
	}

	for _, field := range node._fields {
		switch field.Name {
		case "startCursor":
			res := it.StartCursor

			node.StartCursor = res

		case "endCursor":
			res := it.EndCursor

			node.EndCursor = res

		case "hasNextPage":
			res := it.HasNextPage

			node.HasNextPage = res

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return &node
}

func (t *_PageInfoNode) WriteJson(w *jsonw.Writer) {
	w.BeginObject()
	for _, field := range t._fields {
		switch field.Name {
		case "startCursor":
			w.ObjectKey("startCursor")
			w.String(t.StartCursor)
		case "endCursor":
			w.ObjectKey("endCursor")
			w.String(t.EndCursor)
		case "hasNextPage":
			w.ObjectKey("hasNextPage")
			w.Bool(t.HasNextPage)

		}
	}
	w.EndObject()
}

type _QueryNode struct {
	_fields []collectedField

	Hero      jsonw.JsonWriter
	Reviews   []jsonw.JsonWriter
	Search    []jsonw.JsonWriter
	Character jsonw.JsonWriter
	Droid     jsonw.JsonWriter
	Human     jsonw.JsonWriter
	Starship  jsonw.JsonWriter
	__schema  jsonw.JsonWriter
	__type    jsonw.JsonWriter
}

var queryImplementors = []string{"Query"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _query(sel []query.Selection, it *interface{}) jsonw.JsonWriter {
	node := _QueryNode{
		_fields: ec.collectFields(sel, queryImplementors, map[string]bool{}),
	}

	for _, field := range node._fields {
		switch field.Name {
		case "hero":
			var arg0 *string
			if tmp, ok := field.Args["episode"]; ok {
				tmp2, err := coerceString(tmp)
				if err != nil {
					ec.Error(err)
					continue
				}
				arg0 = &tmp2
			}

			ec.wg.Add(1)
			go func(field collectedField) {
				defer ec.wg.Done()

				res, err := ec.resolvers.Query_hero(ec.ctx, arg0)
				if err != nil {
					ec.Error(err)
					return
				}

				node.Hero = ec._character(field.Selections, res)

			}(field)

		case "reviews":
			var arg0 string
			if tmp, ok := field.Args["episode"]; ok {
				tmp2, err := coerceString(tmp)
				if err != nil {
					ec.Error(err)
					continue
				}
				arg0 = tmp2
			}
			var arg1 *time.Time
			if tmp, ok := field.Args["since"]; ok {
				if tmpStr, ok := tmp.(string); ok {
					tmpDate, err := time.Parse(time.RFC3339, tmpStr)
					if err != nil {
						ec.Error(err)
						continue
					}
					arg1 = &tmpDate
				} else {
					ec.Errorf("Time 'since' should be RFC3339 formatted string")
					continue
				}
			}

			ec.wg.Add(1)
			go func(field collectedField) {
				defer ec.wg.Done()

				res, err := ec.resolvers.Query_reviews(ec.ctx, arg0, arg1)
				if err != nil {
					ec.Error(err)
					return
				}

				if res != nil {

					for i := range res {
						node.Reviews = append(node.Reviews, ec._review(field.Selections, &res[i]))
					}

				}

			}(field)

		case "search":
			var arg0 string
			if tmp, ok := field.Args["text"]; ok {
				tmp2, err := coerceString(tmp)
				if err != nil {
					ec.Error(err)
					continue
				}
				arg0 = tmp2
			}

			ec.wg.Add(1)
			go func(field collectedField) {
				defer ec.wg.Done()

				res, err := ec.resolvers.Query_search(ec.ctx, arg0)
				if err != nil {
					ec.Error(err)
					return
				}

				if res != nil {

					for i := range res {
						node.Search = append(node.Search, ec._searchResult(field.Selections, res[i]))
					}

				}

			}(field)

		case "character":
			var arg0 string
			if tmp, ok := field.Args["id"]; ok {
				tmp2, err := coerceString(tmp)
				if err != nil {
					ec.Error(err)
					continue
				}
				arg0 = tmp2
			}

			ec.wg.Add(1)
			go func(field collectedField) {
				defer ec.wg.Done()

				res, err := ec.resolvers.Query_character(ec.ctx, arg0)
				if err != nil {
					ec.Error(err)
					return
				}

				node.Character = ec._character(field.Selections, res)

			}(field)

		case "droid":
			var arg0 string
			if tmp, ok := field.Args["id"]; ok {
				tmp2, err := coerceString(tmp)
				if err != nil {
					ec.Error(err)
					continue
				}
				arg0 = tmp2
			}

			ec.wg.Add(1)
			go func(field collectedField) {
				defer ec.wg.Done()

				res, err := ec.resolvers.Query_droid(ec.ctx, arg0)
				if err != nil {
					ec.Error(err)
					return
				}

				if res != nil {

					node.Droid = ec._droid(field.Selections, res)

				}

			}(field)

		case "human":
			var arg0 string
			if tmp, ok := field.Args["id"]; ok {
				tmp2, err := coerceString(tmp)
				if err != nil {
					ec.Error(err)
					continue
				}
				arg0 = tmp2
			}

			ec.wg.Add(1)
			go func(field collectedField) {
				defer ec.wg.Done()

				res, err := ec.resolvers.Query_human(ec.ctx, arg0)
				if err != nil {
					ec.Error(err)
					return
				}

				if res != nil {

					node.Human = ec._human(field.Selections, res)

				}

			}(field)

		case "starship":
			var arg0 string
			if tmp, ok := field.Args["id"]; ok {
				tmp2, err := coerceString(tmp)
				if err != nil {
					ec.Error(err)
					continue
				}
				arg0 = tmp2
			}

			ec.wg.Add(1)
			go func(field collectedField) {
				defer ec.wg.Done()

				res, err := ec.resolvers.Query_starship(ec.ctx, arg0)
				if err != nil {
					ec.Error(err)
					return
				}

				if res != nil {

					node.Starship = ec._starship(field.Selections, res)

				}

			}(field)

		case "__schema":
			res := ec.introspectSchema()

			if res != nil {

				node.__schema = ec.___Schema(field.Selections, res)

			}

		case "__type":
			var arg0 string
			if tmp, ok := field.Args["name"]; ok {
				tmp2, err := coerceString(tmp)
				if err != nil {
					ec.Error(err)
					continue
				}
				arg0 = tmp2
			}
			res := ec.introspectType(arg0)

			if res != nil {

				node.__type = ec.___Type(field.Selections, res)

			}

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return &node
}

func (t *_QueryNode) WriteJson(w *jsonw.Writer) {
	w.BeginObject()
	for _, field := range t._fields {
		switch field.Name {
		case "hero":
			w.ObjectKey("hero")
			t.Hero.WriteJson(w)
		case "reviews":
			w.ObjectKey("reviews")
			w.BeginArray()
			for _, val := range t.Reviews {
				val.WriteJson(w)
			}
			w.EndArray()
		case "search":
			w.ObjectKey("search")
			w.BeginArray()
			for _, val := range t.Search {
				val.WriteJson(w)
			}
			w.EndArray()
		case "character":
			w.ObjectKey("character")
			t.Character.WriteJson(w)
		case "droid":
			w.ObjectKey("droid")
			if t.Droid == nil {
				w.Null()
			} else {
				t.Droid.WriteJson(w)
			}
		case "human":
			w.ObjectKey("human")
			if t.Human == nil {
				w.Null()
			} else {
				t.Human.WriteJson(w)
			}
		case "starship":
			w.ObjectKey("starship")
			if t.Starship == nil {
				w.Null()
			} else {
				t.Starship.WriteJson(w)
			}
		case "__schema":
			w.ObjectKey("__schema")
			if t.__schema == nil {
				w.Null()
			} else {
				t.__schema.WriteJson(w)
			}
		case "__type":
			w.ObjectKey("__type")
			if t.__type == nil {
				w.Null()
			} else {
				t.__type.WriteJson(w)
			}

		}
	}
	w.EndObject()
}

type _ReviewNode struct {
	_fields []collectedField

	Stars      int
	Commentary *string
	Time       time.Time
}

var reviewImplementors = []string{"Review"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _review(sel []query.Selection, it *Review) jsonw.JsonWriter {
	node := _ReviewNode{
		_fields: ec.collectFields(sel, reviewImplementors, map[string]bool{}),
	}

	for _, field := range node._fields {
		switch field.Name {
		case "stars":
			res := it.Stars

			node.Stars = res

		case "commentary":
			res := it.Commentary

			node.Commentary = res

		case "time":
			res := it.Time

			node.Time = res

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return &node
}

func (t *_ReviewNode) WriteJson(w *jsonw.Writer) {
	w.BeginObject()
	for _, field := range t._fields {
		switch field.Name {
		case "stars":
			w.ObjectKey("stars")
			w.Int(t.Stars)
		case "commentary":
			w.ObjectKey("commentary")
			if t.Commentary == nil {
				w.Null()
			} else {
				w.String(*t.Commentary)
			}
		case "time":
			w.ObjectKey("time")
			w.Time(t.Time)

		}
	}
	w.EndObject()
}

type _StarshipNode struct {
	_fields []collectedField

	Id     string
	Name   string
	Length float64
}

var starshipImplementors = []string{"Starship"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _starship(sel []query.Selection, it *Starship) jsonw.JsonWriter {
	node := _StarshipNode{
		_fields: ec.collectFields(sel, starshipImplementors, map[string]bool{}),
	}

	for _, field := range node._fields {
		switch field.Name {
		case "id":
			res := it.ID

			node.Id = res

		case "name":
			res := it.Name

			node.Name = res

		case "length":
			var arg0 string
			if tmp, ok := field.Args["unit"]; ok {
				tmp2, err := coerceString(tmp)
				if err != nil {
					ec.Error(err)
					continue
				}
				arg0 = tmp2
			}
			res := it.Length(arg0)

			node.Length = res

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return &node
}

func (t *_StarshipNode) WriteJson(w *jsonw.Writer) {
	w.BeginObject()
	for _, field := range t._fields {
		switch field.Name {
		case "id":
			w.ObjectKey("id")
			w.String(t.Id)
		case "name":
			w.ObjectKey("name")
			w.String(t.Name)
		case "length":
			w.ObjectKey("length")
			w.Float64(t.Length)

		}
	}
	w.EndObject()
}

type ___DirectiveNode struct {
	_fields []collectedField

	Name        string
	Description *string
	Locations   []string
	Args        []jsonw.JsonWriter
}

var __DirectiveImplementors = []string{"__Directive"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Directive(sel []query.Selection, it *introspection.Directive) jsonw.JsonWriter {
	node := ___DirectiveNode{
		_fields: ec.collectFields(sel, __DirectiveImplementors, map[string]bool{}),
	}

	for _, field := range node._fields {
		switch field.Name {
		case "name":
			res := it.Name()

			node.Name = res

		case "description":
			res := it.Description()

			node.Description = res

		case "locations":
			res := it.Locations()

			node.Locations = res

		case "args":
			res := it.Args()

			if res != nil {

				for i := range res {
					node.Args = append(node.Args, ec.___InputValue(field.Selections, res[i]))
				}

			}

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return &node
}

func (t *___DirectiveNode) WriteJson(w *jsonw.Writer) {
	w.BeginObject()
	for _, field := range t._fields {
		switch field.Name {
		case "name":
			w.ObjectKey("name")
			w.String(t.Name)
		case "description":
			w.ObjectKey("description")
			if t.Description == nil {
				w.Null()
			} else {
				w.String(*t.Description)
			}
		case "locations":
			w.ObjectKey("locations")
			w.BeginArray()
			for _, val := range t.Locations {
				w.String(val)
			}
			w.EndArray()
		case "args":
			w.ObjectKey("args")
			w.BeginArray()
			for _, val := range t.Args {
				if val == nil {
					w.Null()
				} else {
					val.WriteJson(w)
				}
			}
			w.EndArray()

		}
	}
	w.EndObject()
}

type ___EnumValueNode struct {
	_fields []collectedField

	Name              string
	Description       *string
	IsDeprecated      bool
	DeprecationReason *string
}

var __EnumValueImplementors = []string{"__EnumValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___EnumValue(sel []query.Selection, it *introspection.EnumValue) jsonw.JsonWriter {
	node := ___EnumValueNode{
		_fields: ec.collectFields(sel, __EnumValueImplementors, map[string]bool{}),
	}

	for _, field := range node._fields {
		switch field.Name {
		case "name":
			res := it.Name()

			node.Name = res

		case "description":
			res := it.Description()

			node.Description = res

		case "isDeprecated":
			res := it.IsDeprecated()

			node.IsDeprecated = res

		case "deprecationReason":
			res := it.DeprecationReason()

			node.DeprecationReason = res

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return &node
}

func (t *___EnumValueNode) WriteJson(w *jsonw.Writer) {
	w.BeginObject()
	for _, field := range t._fields {
		switch field.Name {
		case "name":
			w.ObjectKey("name")
			w.String(t.Name)
		case "description":
			w.ObjectKey("description")
			if t.Description == nil {
				w.Null()
			} else {
				w.String(*t.Description)
			}
		case "isDeprecated":
			w.ObjectKey("isDeprecated")
			w.Bool(t.IsDeprecated)
		case "deprecationReason":
			w.ObjectKey("deprecationReason")
			if t.DeprecationReason == nil {
				w.Null()
			} else {
				w.String(*t.DeprecationReason)
			}

		}
	}
	w.EndObject()
}

type ___FieldNode struct {
	_fields []collectedField

	Name              string
	Description       *string
	Args              []jsonw.JsonWriter
	Type              jsonw.JsonWriter
	IsDeprecated      bool
	DeprecationReason *string
}

var __FieldImplementors = []string{"__Field"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Field(sel []query.Selection, it *introspection.Field) jsonw.JsonWriter {
	node := ___FieldNode{
		_fields: ec.collectFields(sel, __FieldImplementors, map[string]bool{}),
	}

	for _, field := range node._fields {
		switch field.Name {
		case "name":
			res := it.Name()

			node.Name = res

		case "description":
			res := it.Description()

			node.Description = res

		case "args":
			res := it.Args()

			if res != nil {

				for i := range res {
					node.Args = append(node.Args, ec.___InputValue(field.Selections, res[i]))
				}

			}

		case "type":
			res := it.Type()

			if res != nil {

				node.Type = ec.___Type(field.Selections, res)

			}

		case "isDeprecated":
			res := it.IsDeprecated()

			node.IsDeprecated = res

		case "deprecationReason":
			res := it.DeprecationReason()

			node.DeprecationReason = res

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return &node
}

func (t *___FieldNode) WriteJson(w *jsonw.Writer) {
	w.BeginObject()
	for _, field := range t._fields {
		switch field.Name {
		case "name":
			w.ObjectKey("name")
			w.String(t.Name)
		case "description":
			w.ObjectKey("description")
			if t.Description == nil {
				w.Null()
			} else {
				w.String(*t.Description)
			}
		case "args":
			w.ObjectKey("args")
			w.BeginArray()
			for _, val := range t.Args {
				if val == nil {
					w.Null()
				} else {
					val.WriteJson(w)
				}
			}
			w.EndArray()
		case "type":
			w.ObjectKey("type")
			if t.Type == nil {
				w.Null()
			} else {
				t.Type.WriteJson(w)
			}
		case "isDeprecated":
			w.ObjectKey("isDeprecated")
			w.Bool(t.IsDeprecated)
		case "deprecationReason":
			w.ObjectKey("deprecationReason")
			if t.DeprecationReason == nil {
				w.Null()
			} else {
				w.String(*t.DeprecationReason)
			}

		}
	}
	w.EndObject()
}

type ___InputValueNode struct {
	_fields []collectedField

	Name         string
	Description  *string
	Type         jsonw.JsonWriter
	DefaultValue *string
}

var __InputValueImplementors = []string{"__InputValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___InputValue(sel []query.Selection, it *introspection.InputValue) jsonw.JsonWriter {
	node := ___InputValueNode{
		_fields: ec.collectFields(sel, __InputValueImplementors, map[string]bool{}),
	}

	for _, field := range node._fields {
		switch field.Name {
		case "name":
			res := it.Name()

			node.Name = res

		case "description":
			res := it.Description()

			node.Description = res

		case "type":
			res := it.Type()

			if res != nil {

				node.Type = ec.___Type(field.Selections, res)

			}

		case "defaultValue":
			res := it.DefaultValue()

			node.DefaultValue = res

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return &node
}

func (t *___InputValueNode) WriteJson(w *jsonw.Writer) {
	w.BeginObject()
	for _, field := range t._fields {
		switch field.Name {
		case "name":
			w.ObjectKey("name")
			w.String(t.Name)
		case "description":
			w.ObjectKey("description")
			if t.Description == nil {
				w.Null()
			} else {
				w.String(*t.Description)
			}
		case "type":
			w.ObjectKey("type")
			if t.Type == nil {
				w.Null()
			} else {
				t.Type.WriteJson(w)
			}
		case "defaultValue":
			w.ObjectKey("defaultValue")
			if t.DefaultValue == nil {
				w.Null()
			} else {
				w.String(*t.DefaultValue)
			}

		}
	}
	w.EndObject()
}

type ___SchemaNode struct {
	_fields []collectedField

	Types            []jsonw.JsonWriter
	QueryType        jsonw.JsonWriter
	MutationType     jsonw.JsonWriter
	SubscriptionType jsonw.JsonWriter
	Directives       []jsonw.JsonWriter
}

var __SchemaImplementors = []string{"__Schema"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Schema(sel []query.Selection, it *introspection.Schema) jsonw.JsonWriter {
	node := ___SchemaNode{
		_fields: ec.collectFields(sel, __SchemaImplementors, map[string]bool{}),
	}

	for _, field := range node._fields {
		switch field.Name {
		case "types":
			res := it.Types()

			if res != nil {

				for i := range res {
					node.Types = append(node.Types, ec.___Type(field.Selections, res[i]))
				}

			}

		case "queryType":
			res := it.QueryType()

			if res != nil {

				node.QueryType = ec.___Type(field.Selections, res)

			}

		case "mutationType":
			res := it.MutationType()

			if res != nil {

				node.MutationType = ec.___Type(field.Selections, res)

			}

		case "subscriptionType":
			res := it.SubscriptionType()

			if res != nil {

				node.SubscriptionType = ec.___Type(field.Selections, res)

			}

		case "directives":
			res := it.Directives()

			if res != nil {

				for i := range res {
					node.Directives = append(node.Directives, ec.___Directive(field.Selections, res[i]))
				}

			}

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return &node
}

func (t *___SchemaNode) WriteJson(w *jsonw.Writer) {
	w.BeginObject()
	for _, field := range t._fields {
		switch field.Name {
		case "types":
			w.ObjectKey("types")
			w.BeginArray()
			for _, val := range t.Types {
				if val == nil {
					w.Null()
				} else {
					val.WriteJson(w)
				}
			}
			w.EndArray()
		case "queryType":
			w.ObjectKey("queryType")
			if t.QueryType == nil {
				w.Null()
			} else {
				t.QueryType.WriteJson(w)
			}
		case "mutationType":
			w.ObjectKey("mutationType")
			if t.MutationType == nil {
				w.Null()
			} else {
				t.MutationType.WriteJson(w)
			}
		case "subscriptionType":
			w.ObjectKey("subscriptionType")
			if t.SubscriptionType == nil {
				w.Null()
			} else {
				t.SubscriptionType.WriteJson(w)
			}
		case "directives":
			w.ObjectKey("directives")
			w.BeginArray()
			for _, val := range t.Directives {
				if val == nil {
					w.Null()
				} else {
					val.WriteJson(w)
				}
			}
			w.EndArray()

		}
	}
	w.EndObject()
}

type ___TypeNode struct {
	_fields []collectedField

	Kind          string
	Name          *string
	Description   *string
	Fields        []jsonw.JsonWriter
	Interfaces    []jsonw.JsonWriter
	PossibleTypes []jsonw.JsonWriter
	EnumValues    []jsonw.JsonWriter
	InputFields   []jsonw.JsonWriter
	OfType        jsonw.JsonWriter
}

var __TypeImplementors = []string{"__Type"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Type(sel []query.Selection, it *introspection.Type) jsonw.JsonWriter {
	node := ___TypeNode{
		_fields: ec.collectFields(sel, __TypeImplementors, map[string]bool{}),
	}

	for _, field := range node._fields {
		switch field.Name {
		case "kind":
			res := it.Kind()

			node.Kind = res

		case "name":
			res := it.Name()

			node.Name = res

		case "description":
			res := it.Description()

			node.Description = res

		case "fields":
			var arg0 bool
			if tmp, ok := field.Args["includeDeprecated"]; ok {
				tmp2, err := coerceBool(tmp)
				if err != nil {
					ec.Error(err)
					continue
				}
				arg0 = tmp2
			}
			res := it.Fields(arg0)

			if res != nil {

				for i := range res {
					node.Fields = append(node.Fields, ec.___Field(field.Selections, res[i]))
				}

			}

		case "interfaces":
			res := it.Interfaces()

			if res != nil {

				for i := range res {
					node.Interfaces = append(node.Interfaces, ec.___Type(field.Selections, res[i]))
				}

			}

		case "possibleTypes":
			res := it.PossibleTypes()

			if res != nil {

				for i := range res {
					node.PossibleTypes = append(node.PossibleTypes, ec.___Type(field.Selections, res[i]))
				}

			}

		case "enumValues":
			var arg0 bool
			if tmp, ok := field.Args["includeDeprecated"]; ok {
				tmp2, err := coerceBool(tmp)
				if err != nil {
					ec.Error(err)
					continue
				}
				arg0 = tmp2
			}
			res := it.EnumValues(arg0)

			if res != nil {

				for i := range res {
					node.EnumValues = append(node.EnumValues, ec.___EnumValue(field.Selections, res[i]))
				}

			}

		case "inputFields":
			res := it.InputFields()

			if res != nil {

				for i := range res {
					node.InputFields = append(node.InputFields, ec.___InputValue(field.Selections, res[i]))
				}

			}

		case "ofType":
			res := it.OfType()

			if res != nil {

				node.OfType = ec.___Type(field.Selections, res)

			}

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return &node
}

func (t *___TypeNode) WriteJson(w *jsonw.Writer) {
	w.BeginObject()
	for _, field := range t._fields {
		switch field.Name {
		case "kind":
			w.ObjectKey("kind")
			w.String(t.Kind)
		case "name":
			w.ObjectKey("name")
			if t.Name == nil {
				w.Null()
			} else {
				w.String(*t.Name)
			}
		case "description":
			w.ObjectKey("description")
			if t.Description == nil {
				w.Null()
			} else {
				w.String(*t.Description)
			}
		case "fields":
			w.ObjectKey("fields")
			w.BeginArray()
			for _, val := range t.Fields {
				if val == nil {
					w.Null()
				} else {
					val.WriteJson(w)
				}
			}
			w.EndArray()
		case "interfaces":
			w.ObjectKey("interfaces")
			w.BeginArray()
			for _, val := range t.Interfaces {
				if val == nil {
					w.Null()
				} else {
					val.WriteJson(w)
				}
			}
			w.EndArray()
		case "possibleTypes":
			w.ObjectKey("possibleTypes")
			w.BeginArray()
			for _, val := range t.PossibleTypes {
				if val == nil {
					w.Null()
				} else {
					val.WriteJson(w)
				}
			}
			w.EndArray()
		case "enumValues":
			w.ObjectKey("enumValues")
			w.BeginArray()
			for _, val := range t.EnumValues {
				if val == nil {
					w.Null()
				} else {
					val.WriteJson(w)
				}
			}
			w.EndArray()
		case "inputFields":
			w.ObjectKey("inputFields")
			w.BeginArray()
			for _, val := range t.InputFields {
				if val == nil {
					w.Null()
				} else {
					val.WriteJson(w)
				}
			}
			w.EndArray()
		case "ofType":
			w.ObjectKey("ofType")
			if t.OfType == nil {
				w.Null()
			} else {
				t.OfType.WriteJson(w)
			}

		}
	}
	w.EndObject()
}

func (ec *executionContext) _character(sel []query.Selection, it Character) jsonw.JsonWriter {
	switch it := it.(type) {
	case nil:
		return jsonw.NullWriter

	case Human:
		return ec._human(sel, &it)

	case *Human:
		return ec._human(sel, it)

	case Droid:
		return ec._droid(sel, &it)

	case *Droid:
		return ec._droid(sel, it)

	default:
		panic(fmt.Errorf("unexpected type %T", it))
	}
}

func (ec *executionContext) _searchResult(sel []query.Selection, it SearchResult) jsonw.JsonWriter {
	switch it := it.(type) {
	case nil:
		return jsonw.NullWriter

	case Human:
		return ec._human(sel, &it)

	case *Human:
		return ec._human(sel, it)

	case Droid:
		return ec._droid(sel, &it)

	case *Droid:
		return ec._droid(sel, it)

	case Starship:
		return ec._starship(sel, &it)

	case *Starship:
		return ec._starship(sel, it)

	default:
		panic(fmt.Errorf("unexpected type %T", it))
	}
}

var parsedSchema = schema.MustParse("schema {\n    query: Query\n    mutation: Mutation\n}\n# The query type, represents all of the entry points into our object graph\ntype Query {\n    hero(episode: Episode = NEWHOPE): Character\n    reviews(episode: Episode!, since: Time): [Review]!\n    search(text: String!): [SearchResult]!\n    character(id: ID!): Character\n    droid(id: ID!): Droid\n    human(id: ID!): Human\n    starship(id: ID!): Starship\n}\n# The mutation type, represents all updates we can make to our data\ntype Mutation {\n    createReview(episode: Episode!, review: ReviewInput!): Review\n}\n# The episodes in the Star Wars trilogy\nenum Episode {\n    # Star Wars Episode IV: A New Hope, released in 1977.\n    NEWHOPE\n    # Star Wars Episode V: The Empire Strikes Back, released in 1980.\n    EMPIRE\n    # Star Wars Episode VI: Return of the Jedi, released in 1983.\n    JEDI\n}\n# A character from the Star Wars universe\ninterface Character {\n    # The ID of the character\n    id: ID!\n    # The name of the character\n    name: String!\n    # The friends of the character, or an empty list if they have none\n    friends: [Character]\n    # The friends of the character exposed as a connection with edges\n    friendsConnection(first: Int, after: ID): FriendsConnection!\n    # The movies this character appears in\n    appearsIn: [Episode!]!\n}\n# Units of height\nenum LengthUnit {\n    # The standard unit around the world\n    METER\n    # Primarily used in the United States\n    FOOT\n}\n# A humanoid creature from the Star Wars universe\ntype Human implements Character {\n    # The ID of the human\n    id: ID!\n    # What this human calls themselves\n    name: String!\n    # Height in the preferred unit, default is meters\n    height(unit: LengthUnit = METER): Float!\n    # Mass in kilograms, or null if unknown\n    mass: Float\n    # This human's friends, or an empty list if they have none\n    friends: [Character]\n    # The friends of the human exposed as a connection with edges\n    friendsConnection(first: Int, after: ID): FriendsConnection!\n    # The movies this human appears in\n    appearsIn: [Episode!]!\n    # A list of starships this person has piloted, or an empty list if none\n    starships: [Starship]\n}\n# An autonomous mechanical character in the Star Wars universe\ntype Droid implements Character {\n    # The ID of the droid\n    id: ID!\n    # What others call this droid\n    name: String!\n    # This droid's friends, or an empty list if they have none\n    friends: [Character]\n    # The friends of the droid exposed as a connection with edges\n    friendsConnection(first: Int, after: ID): FriendsConnection!\n    # The movies this droid appears in\n    appearsIn: [Episode!]!\n    # This droid's primary function\n    primaryFunction: String\n}\n# A connection object for a character's friends\ntype FriendsConnection {\n    # The total number of friends\n    totalCount: Int!\n    # The edges for each of the character's friends.\n    edges: [FriendsEdge]\n    # A list of the friends, as a convenience when edges are not needed.\n    friends: [Character]\n    # Information for paginating this connection\n    pageInfo: PageInfo!\n}\n# An edge object for a character's friends\ntype FriendsEdge {\n    # A cursor used for pagination\n    cursor: ID!\n    # The character represented by this friendship edge\n    node: Character\n}\n# Information for paginating this connection\ntype PageInfo {\n    startCursor: ID\n    endCursor: ID\n    hasNextPage: Boolean!\n}\n# Represents a review for a movie\ntype Review {\n    # The number of stars this review gave, 1-5\n    stars: Int!\n    # Comment about the movie\n    commentary: String\n    # when the review was posted\n    time: Time\n}\n# The input object sent when someone is creating a new review\ninput ReviewInput {\n    # 0-5 stars\n    stars: Int!\n    # Comment about the movie, optional\n    commentary: String\n    # when the review was posted\n    time: Time\n}\ntype Starship {\n    # The ID of the starship\n    id: ID!\n    # The name of the starship\n    name: String!\n    # Length of the starship, along the longest axis\n    length(unit: LengthUnit = METER): Float!\n}\nunion SearchResult = Human | Droid | Starship\n")

func (ec *executionContext) introspectSchema() *introspection.Schema {
	return introspection.WrapSchema(parsedSchema)
}

func (ec *executionContext) introspectType(name string) *introspection.Type {
	t := parsedSchema.Resolve(name)
	if t == nil {
		return nil
	}
	return introspection.WrapType(t)
}

func instanceOf(val string, satisfies []string) bool {
	for _, s := range satisfies {
		if val == s {
			return true
		}
	}
	return false
}

func (ec *executionContext) collectFields(selSet []query.Selection, satisfies []string, visited map[string]bool) []collectedField {
	var groupedFields []collectedField

	for _, sel := range selSet {
		switch sel := sel.(type) {
		case *query.Field:
			f := getOrCreateField(&groupedFields, sel.Name.Name, func() collectedField {
				f := collectedField{
					Alias: sel.Alias.Name,
					Name:  sel.Name.Name,
				}
				if len(sel.Arguments) > 0 {
					f.Args = map[string]interface{}{}
					for _, arg := range sel.Arguments {
						f.Args[arg.Name.Name] = arg.Value.Value(ec.variables)
					}
				}
				return f
			})

			f.Selections = append(f.Selections, sel.Selections...)
		case *query.InlineFragment:
			if !instanceOf(sel.On.Ident.Name, satisfies) {
				continue
			}

			for _, childField := range ec.collectFields(sel.Selections, satisfies, visited) {
				f := getOrCreateField(&groupedFields, childField.Name, func() collectedField { return childField })
				f.Selections = append(f.Selections, childField.Selections...)
			}

		case *query.FragmentSpread:
			fragmentName := sel.Name.Name
			if _, seen := visited[fragmentName]; seen {
				continue
			}
			visited[fragmentName] = true

			fragment := ec.doc.Fragments.Get(fragmentName)
			if fragment == nil {
				ec.Errorf("missing fragment %s", fragmentName)
				continue
			}

			if !instanceOf(fragment.On.Ident.Name, satisfies) {
				continue
			}

			for _, childField := range ec.collectFields(fragment.Selections, satisfies, visited) {
				f := getOrCreateField(&groupedFields, childField.Name, func() collectedField { return childField })
				f.Selections = append(f.Selections, childField.Selections...)
			}

		default:
			panic(fmt.Errorf("unsupported %T", sel))
		}
	}

	return groupedFields
}

type collectedField struct {
	Alias      string
	Name       string
	Args       map[string]interface{}
	Selections []query.Selection
}

func decodeHook(sourceType reflect.Type, destType reflect.Type, value interface{}) (interface{}, error) {
	if destType.PkgPath() == "time" && destType.Name() == "Time" {
		if dateStr, ok := value.(string); ok {
			return time.Parse(time.RFC3339, dateStr)
		}
		return nil, errors.Errorf("time should be an RFC3339 formatted string")
	}
	return value, nil
}

// nolint: deadcode, megacheck
func unpackComplexArg(result interface{}, data interface{}) error {
	decoder, err := mapstructure.NewDecoder(&mapstructure.DecoderConfig{
		TagName:     "graphql",
		ErrorUnused: true,
		Result:      result,
		DecodeHook:  decodeHook,
	})
	if err != nil {
		panic(err)
	}

	return decoder.Decode(data)
}

func getOrCreateField(c *[]collectedField, name string, creator func() collectedField) *collectedField {
	for i, cf := range *c {
		if cf.Alias == name {
			return &(*c)[i]
		}
	}

	f := creator()

	*c = append(*c, f)
	return &(*c)[len(*c)-1]
}

// nolint: deadcode, megacheck
func coerceString(v interface{}) (string, error) {
	switch v := v.(type) {
	case string:
		return v, nil
	case int:
		return strconv.Itoa(v), nil
	case float64:
		return fmt.Sprintf("%f", v), nil
	case bool:
		if v {
			return "true", nil
		} else {
			return "false", nil
		}
	case nil:
		return "null", nil
	default:
		return "", fmt.Errorf("%T is not a string", v)
	}
}

// nolint: deadcode, megacheck
func coerceBool(v interface{}) (bool, error) {
	switch v := v.(type) {
	case string:
		return "true" == strings.ToLower(v), nil
	case int:
		return v != 0, nil
	case bool:
		return v, nil
	default:
		return false, fmt.Errorf("%T is not a bool", v)
	}
}

// nolint: deadcode, megacheck
func coerceInt(v interface{}) (int, error) {
	switch v := v.(type) {
	case string:
		return strconv.Atoi(v)
	case int:
		return v, nil
	case float64:
		return int(v), nil
	default:
		return 0, fmt.Errorf("%T is not an int", v)
	}
}

// nolint: deadcode, megacheck
func coercefloat64(v interface{}) (float64, error) {
	switch v := v.(type) {
	case string:
		return strconv.ParseFloat(v, 64)
	case int:
		return float64(v), nil
	case float64:
		return v, nil
	default:
		return 0, fmt.Errorf("%T is not an float", v)
	}
}

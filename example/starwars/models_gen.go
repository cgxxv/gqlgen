// Code generated by github.com/vektah/gqlgen, DO NOT EDIT.

package starwars

import (
	fmt "fmt"
	io "io"
	strconv "strconv"
)

type Character interface{}
type FriendsEdge struct {
	Cursor string    `json:"cursor"`
	Node   Character `json:"node"`
}
type PageInfo struct {
	StartCursor string `json:"startCursor"`
	EndCursor   string `json:"endCursor"`
	HasNextPage bool   `json:"hasNextPage"`
}
type SearchResult interface{}
type Starship struct {
	ID      string  `json:"id"`
	Name    string  `json:"name"`
	Length  float64 `json:"length"`
	History [][]int `json:"history"`
}

type Episode string

const (
	// Star Wars Episode IV: A New Hope, released in 1977.
	EpisodeNewhope Episode = "NEWHOPE" // Star Wars Episode V: The Empire Strikes Back, released in 1980.
	EpisodeEmpire  Episode = "EMPIRE"  // Star Wars Episode VI: Return of the Jedi, released in 1983.
	EpisodeJedi    Episode = "JEDI"
)

func (e Episode) IsValid() bool {
	switch e {
	case EpisodeNewhope, EpisodeEmpire, EpisodeJedi:
		return true
	}
	return false
}

func (e Episode) String() string {
	return string(e)
}

func (e *Episode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Episode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Episode", str)
	}
	return nil
}

func (e Episode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LengthUnit string

const (
	// The standard unit around the world
	LengthUnitMeter LengthUnit = "METER" // Primarily used in the United States
	LengthUnitFoot  LengthUnit = "FOOT"
)

func (e LengthUnit) IsValid() bool {
	switch e {
	case LengthUnitMeter, LengthUnitFoot:
		return true
	}
	return false
}

func (e LengthUnit) String() string {
	return string(e)
}

func (e *LengthUnit) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LengthUnit(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LengthUnit", str)
	}
	return nil
}

func (e LengthUnit) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

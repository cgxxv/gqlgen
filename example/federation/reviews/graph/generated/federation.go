// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"github.com/99designs/gqlgen/plugin/federation/fedruntime"
)

func (ec *executionContext) __resolve__service(ctx context.Context) (fedruntime.Service, error) {
	if ec.DisableIntrospection {
		return fedruntime.Service{}, errors.New("federated introspection disabled")
	}
	return fedruntime.Service{
		SDL: `type Product @extends @key(fields: "upc") {
	upc: String! @external
	reviews: [Review]
}
type Review {
	body: String!
	author: User! @provides(fields: "username")
	product: Product!
}
type User @extends @key(fields: "id") {
	id: ID! @external
	reviews: [Review]
}
`,
	}, nil
}

func (ec *executionContext) __resolve_entities(ctx context.Context, representations []map[string]interface{}) ([]fedruntime.Entity, error) {
	list := []fedruntime.Entity{}
	for _, rep := range representations {
		typeName, ok := rep["__typename"].(string)
		if !ok {
			return nil, errors.New("__typename must be an existing string")
		}
		switch typeName {

		case "Product":
			id0, err := ec.unmarshalNString2string(ctx, rep["upc"])
			if err != nil {
				return nil, errors.New(fmt.Sprintf("Field %s undefined in schema.", "upc"))
			}

			entity, err := ec.resolvers.Entity().FindProductByUpc(ctx,
				id0)
			if err != nil {
				return nil, err
			}

			list = append(list, entity)

		case "User":
			id0, err := ec.unmarshalNID2string(ctx, rep["id"])
			if err != nil {
				return nil, errors.New(fmt.Sprintf("Field %s undefined in schema.", "id"))
			}

			entity, err := ec.resolvers.Entity().FindUserByID(ctx,
				id0)
			if err != nil {
				return nil, err
			}

			list = append(list, entity)

		default:
			return nil, errors.New("unknown type: " + typeName)
		}
	}
	return list, nil
}

	args := map[string]interface{}{}
	{{- range $i, $arg := . }}
		var arg{{$i}} {{$arg.GoType | ref }}
		if tmp, ok := rawArgs[{{$arg.GQLName|quote}}]; ok {
			{{- if $arg.Directives }}
				argm{{$i}}, err := chainFieldMiddleware([]graphql.FieldMiddleware{
				{{- range $directive := $arg.Directives }}
					func(ctx context.Context, n graphql.Resolver) (res interface{}, err error) {
					{{- range $dArg := $directive.Args }}
						{{- if and $dArg.IsPtr ( notNil "Value" $dArg ) }}
							{{ $dArg.GoVarName }} := {{ $dArg.Value | dump }}
						{{- end }}
					{{- end }}
						return e.directives.{{$directive.Name|ucFirst}}({{$directive.ResolveArgs "tmp" "n" }})
					},
				{{- end }}
				}...)(ctx, func(ctx2 context.Context) (interface{}, error) {
					var err error
					{{$arg.Unmarshal (print "arg" $i) "tmp" }}
					if err != nil {
						return nil, err
					}
					return arg{{ $i }}, nil
				})
				if err != nil {
					return nil, err
				}
				if data, ok := argm{{$i}}.({{$arg.GoType | ref }}); ok {
					arg{{$i}} = data
				} else {
					return nil, errors.New("expect {{$arg.GoType | ref }}")
				}
			{{- else }}
				var err error
				{{ $arg.Unmarshal (print "arg" $i) "tmp" }}
				if err != nil {
					return nil, err
				}
			{{- end }}
			{{- if eq $arg.Definition.GQLDefinition.Kind "INPUT_OBJECT" }}
				{{ $arg.Middleware (print "arg" $i) (print "arg" $i) }}
			{{- end }}
		}
		args[{{$arg.GQLName|quote}}] = arg{{$i}}
	{{- end }}
	return args, nil

	args := map[string]interface{}{}
	{{- range $i, $arg := . }}
		var arg{{$i}} {{$arg.Signature }}
		if tmp, ok := rawArgs[{{$arg.GQLName|quote}}]; ok {
			{{- if or $arg.Directives $arg.IsInput }}
				{{ if $arg.Directives }}
            	argm{{$i}}, err := graphql.ChainFieldMiddleware([]graphql.FieldMiddleware{
					{{- range $directive := $arg.Directives }}
						func(ctx context.Context, n graphql.Resolver) (res interface{}, err error) {
						{{- range $dArg := $directive.Args }}
							{{- if and $dArg.IsPtr (not (eq ($dArg.Value|dump) "nil")) }}{{ $dArg.GoVarName }} := {{ $dArg.Value|dump }}{{ end -}}
						{{- end }}
							return e.directives.{{$directive.Name|ucFirst}}({{$directive.ResolveArgs "tmp" "n" }})
						},
					{{- end }}
					}...)(ctx, func(ctx2 context.Context)(args{{$i}} interface{},err error){
					{{$arg.Unmarshal (print "args" $i) "tmp" }}
					if err != nil {
						return nil, err
					}
					return
				})
				if err != nil {
					return nil, err
				}
				if data, ok := argm{{$i}}.({{$arg.Signature }}); ok{
					arg{{$i}} = data
				} else {
					return nil, errors.New("expect {{$arg.Signature }}")
				}
				{{ else }}
					var err error
					{{$arg.Unmarshal (print "arg" $i) "tmp" }}
					if err != nil {
						return nil, err
					}
				{{ end }}

				{{- if $arg.IsInput }}
					 {{ $arg.Middleware (print "arg" $i) (print "arg" $i) }}
				{{- end }}

			{{ else }}
			var err error
			{{$arg.Unmarshal (print "arg" $i) "tmp" }}
			if err != nil {
				return nil, err
			}
			{{- end }}
		}
		args[{{$arg.GQLName|quote}}] = arg{{$i}}
	{{- end }}
	return args, nil

{{- range $input := .Inputs }}
	{{- if not .HasUnmarshal }}
	func (ec *executionContext) unmarshalInput{{ .Name }}(v interface{}) ({{.Type | ref}}, error) {
		var it {{.Type | ref}}
		var asMap = v.(map[string]interface{})
		{{ range $field := .Fields}}
			{{- if $field.Default}}
				if _, present := asMap[{{$field.Name|quote}}] ; !present {
					asMap[{{$field.Name|quote}}] = {{ $field.Default | dump }}
				}
			{{- end}}
		{{- end }}

		for k, v := range asMap {
			switch k {
			{{- range $field := .Fields }}
			case {{$field.Name|quote}}:
				var err error
				it.{{$field.GoFieldName}}, err = ec.unmarshal{{$field.TypeReference.GQL.Name}}2{{ $field.TypeReference.GO | ts }}(v)
				if err != nil {
					return it, err
				}
			{{- end }}
			}
		}

		return it, nil
	}
	{{- end }}
{{ end }}

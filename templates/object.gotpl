{{- define "object" }}
{{ $object := . }}
type _{{ .Type.GraphQLName}}Node struct {
	_fields []collectedField

    {{- range $field := .Fields }}
        {{- if $field.Type.Scalar }}
            {{$field.GraphQLName|ucFirst}} {{ $field.Type.Local }}
        {{- else }}
            {{$field.GraphQLName|ucFirst}} {{if $field.Type.IsSlice}}[]{{end}}jsonw.JsonWriter
        {{- end }}
    {{- end}}
}

var {{ $object.Type.GraphQLName|lcFirst}}Implementors = {{$object.Implementors}}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _{{$object.Type.GraphQLName|lcFirst}}(sel []query.Selection, it *{{$object.Type.Local}}) jsonw.JsonWriter {
    node := _{{$object.Type.GraphQLName}}Node {
        _fields: ec.collectFields(sel, {{$object.Type.GraphQLName|lcFirst}}Implementors, map[string]bool{}),
    }

	for _, field := range node._fields {
		switch field.Name {
        {{- range $field := $object.Fields }}
		case "{{$field.GraphQLName}}":
            {{- template "args" $field.Args }}

            {{- if $field.IsResolver }}
                ec.wg.Add(1)
                go func(field collectedField) {
                    defer ec.wg.Done()
            {{- end }}

            {{- if $field.VarName }}
                res := {{$field.VarName}}
            {{- else if $field.MethodName }}
                {{- if $field.NoErr }}
                    res := {{$field.MethodName}}({{ $field.CallArgs $object }})
                {{- else }}
                    res, err := {{$field.MethodName}}({{ $field.CallArgs $object }})
                    if err != nil {
                        ec.Error(err)
                        continue
                    }
                {{- end }}
            {{- else }}
                res, err := ec.resolvers.{{ $object.Name }}_{{ $field.GraphQLName }}({{ $field.CallArgs $object }})
                if err != nil {
                    ec.Error(err)
                    return
                }
            {{- end }}

            {{- if $field.Type.Scalar }}
                node.{{$field.GraphQLName|ucFirst}} = res
            {{- else }}
                {{- if or $field.Type.IsPtr $field.Type.IsSlice }}
                    if res != nil {
                {{- end }}
                    {{- if $field.Type.IsSlice }}
                        for i := range {{$field.Type.ByVal "res" }} {
                            node.{{$field.GraphQLName|ucFirst}} = append(node.{{$field.GraphQLName|ucFirst}},  ec._{{$field.Type.GraphQLName|lcFirst}}(field.Selections, {{ $field.Type.Elem.ByRef "res[i]" }}))
                        }
                    {{- else }}
                        node.{{$field.GraphQLName|ucFirst}} = ec._{{$field.Type.GraphQLName|lcFirst}}(field.Selections, {{$field.Type.ByRef "res" }})
                    {{- end }}
                {{- if or $field.Type.IsPtr $field.Type.IsSlice }}
                    }
                {{- end}}
            {{- end }}

            {{- if $field.IsResolver }}
                }(field)
            {{- end }}
        {{- end }}
        default:
            panic("unknown field " + strconv.Quote(field.Name))
		}
	}

    return &node
}

func (t *_{{ $object.Type.GraphQLName }}Node) WriteJson(w *jsonw.Writer) {
    w.BeginObject()
    for _, field := range t._fields {
        switch field.Name {
            {{- range $field := $object.Fields }}
                case "{{$field.GraphQLName}}":
                    w.ObjectKey({{$field.GraphQLName|quote}})
                    {{ $field.WriteJson }}
            {{- end }}
        }
    }
    w.EndObject()
}

{{- end}}
